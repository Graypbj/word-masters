{"mappings":"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","sources":["word-masters.js"],"sourcesContent":["const letters = document.querySelectorAll('.scoreboard-letter');\nconst loadingDiv = document.querySelector('.info-bar');\nconst ANSWER_LENGTH = 5;\nconst ROUNDS = 6;\n\nasync function init() {\n\tlet currentGuess = '';\n\tlet currentRow = 0;\n\tlet isLoading = true;\n\n\tconst res = await fetch(\"https://words.dev-apis.com/word-of-the-day\");\n\tconst resObj = await res.json();\n\tconst word = resObj.word.toUpperCase();\n\tconst wordParts = word.split(\"\");\n\tlet done = false;\n\tsetLoading(false);\n\tisLoading = false;\n\n\tconsole.log(word);\n\n\tfunction addLetter(letter) {\n\t\tif (currentGuess.length < ANSWER_LENGTH) {\n\t\t\tcurrentGuess += letter;\n\t\t} else {\n\t\t\tcurrentGuess = currentGuess.substring(0, currentGuess.length - 1) + letter;\n\t\t}\n\n\t\tletters[ANSWER_LENGTH * currentRow + currentGuess.length - 1].innerText = letter;\n\t}\n\n\tasync function commit() {\n\t\tif (currentGuess.length != ANSWER_LENGTH) {\n\t\t\treturn;\n\t\t}\n\n\t\tisLoading = true;\n\t\tsetLoading(true);\n\t\tconst res = await fetch(\"https://words.dev-apis.com/validate-word\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify({ word: currentGuess })\n\t\t});\n\n\t\tconst resObj = await res.json();\n\t\tconst validWord = resObj.validWord;\n\n\t\tisLoading = false;\n\t\tsetLoading(false);\n\n\t\tif (!validWord) {\n\t\t\tmarkInvalidWord();\n\t\t\treturn;\n\t\t}\n\n\t\tconst guessParts = currentGuess.split(\"\");\n\t\tconst map = makeMap(wordParts);\n\t\tconsole.log(map);\n\n\t\tfor (let i = 0; i < ANSWER_LENGTH; i++) {\n\t\t\t// Mark as correct\n\t\t\tif (guessParts[i] === wordParts[i]) {\n\t\t\t\tletters[currentRow * ANSWER_LENGTH + i].classList.add(\"correct\");\n\t\t\t\tmap[guessParts[i]]--;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < ANSWER_LENGTH; i++) {\n\t\t\tif (guessParts[i] === wordParts[i]) {\n\t\t\t\t// do nothing, we already did it\n\t\t\t} else if (wordParts.includes(guessParts[i]) && map[guessParts[i]] > 0) {\n\t\t\t\tletters[currentRow * ANSWER_LENGTH + i].classList.add(\"close\");\n\t\t\t\tmap[guessParts[i]]--;\n\t\t\t} else {\n\t\t\t\tletters[currentRow * ANSWER_LENGTH + i].classList.add(\"wrong\");\n\t\t\t}\n\t\t}\n\n\t\tcurrentRow++;\n\n\t\tif (currentGuess === word) {\n\t\t\talert(\"you win!\");\n\t\t\tdocument.querySelector('.brand').classList.add(\"winner\");\n\t\t\tdone = true;\n\t\t\treturn;\n\t\t} else if (currentRow === ROUNDS) {\n\t\t\talert(`you lose, the word was ${word}`);\n\t\t\tdone = true;\n\t\t}\n\n\t\tcurrentGuess = '';\n\t}\n\n\tfunction backspace() {\n\t\tcurrentGuess = currentGuess.substring(0, currentGuess.length - 1);\n\t\tletters[ANSWER_LENGTH * currentRow + currentGuess.length].innerText = \"\";\n\t}\n\n\tfunction markInvalidWord() {\n\t\tfor (let i = 0; i < ANSWER_LENGTH; i++) {\n\t\t\tletters[currentRow * ANSWER_LENGTH + i].classList.remove(\"invalid\");\n\n\t\t\tsetTimeout(function() {\n\t\t\t\tletters[currentRow * ANSWER_LENGTH + i].classList.add(\"invalid\");\n\t\t\t}, 10);\n\t\t}\n\t}\n\n\tdocument.addEventListener('keydown', function handleKeyPress(event) {\n\t\tif (done || isLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst action = event.key\n\n\t\tif (action === 'Enter') {\n\t\t\tcommit();\n\t\t} else if (action === 'Backspace') {\n\t\t\tbackspace();\n\t\t} else if (isLetter(action)) {\n\t\t\taddLetter(action.toUpperCase())\n\t\t}\n\t\t// Do nothing if action isn't a letter, enter, or backspace\n\t})\n}\n\nfunction isLetter(letter) {\n\treturn /^[a-zA-Z]$/.test(letter);\n}\n\nfunction setLoading(isLoading) {\n\tloadingDiv.classList.toggle('show', isLoading);\n}\n\nfunction makeMap(array) {\n\tconst obj = {};\n\tfor (let i = 0; i < array.length; i++) {\n\t\tconst letter = array[i];\n\t\tif (obj[letter]) {\n\t\t\tobj[letter]++;\n\t\t} else {\n\t\t\tobj[letter] = 1;\n\t\t}\n\t}\n\treturn obj;\n}\n\ninit();\n\n"],"names":[],"version":3,"file":"word_masters.90b3112b.js.map","sourceRoot":"/__parcel_source_root/"}